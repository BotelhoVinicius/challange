// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/wire_format.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace challenge {

namespace {

const ::google::protobuf::Descriptor *MessageInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection
    *MessageInfo_reflection_ = NULL;

} // namespace

void protobuf_AssignDesc_message_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_message_2eproto() {
  protobuf_AddDesc_message_2eproto();
  const ::google::protobuf::FileDescriptor *file =
      ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
          "message.proto");
  GOOGLE_CHECK(file != NULL);
  MessageInfo_descriptor_ = file->message_type(0);
  static const int MessageInfo_offsets_[4] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo,
                                                     payload_size_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, time_stamp_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, prefix_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, payload_),
  };
  MessageInfo_reflection_ = ::google::protobuf::internal::
      GeneratedMessageReflection::NewGeneratedMessageReflection(
          MessageInfo_descriptor_, MessageInfo::default_instance_,
          MessageInfo_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo,
                                                         _has_bits_[0]),
          -1, -1, sizeof(MessageInfo),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo,
                                                         _internal_metadata_),
          -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                                     &protobuf_AssignDesc_message_2eproto);
}

void protobuf_RegisterTypes(const ::std::string &) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string &) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MessageInfo_descriptor_, &MessageInfo::default_instance());
}

} // namespace

void protobuf_ShutdownFile_message_2eproto() {
  delete MessageInfo::default_instance_;
  delete MessageInfo_reflection_;
}

void protobuf_AddDesc_message_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_message_2eproto() {
  static bool already_here = false;
  if (already_here)
    return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      "\n\rmessage.proto\022\tchallenge\"X\n\013MessageInf"
      "o\022\024\n\014payload_size\030\001 "
      "\002(\005\022\022\n\ntime_stamp\030\002 "
      "\002(\003\022\016\n\006prefix\030\003 "
      "\002(\t\022\017\n\007payload\030\004 \002(\014",
      116);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
      "message.proto", &protobuf_RegisterTypes);
  MessageInfo::default_instance_ = new MessageInfo();
  MessageInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(
      &protobuf_ShutdownFile_message_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_message_2eproto {
  StaticDescriptorInitializer_message_2eproto() {
    protobuf_AddDesc_message_2eproto();
  }
} static_descriptor_initializer_message_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageInfo::kPayloadSizeFieldNumber;
const int MessageInfo::kTimeStampFieldNumber;
const int MessageInfo::kPrefixFieldNumber;
const int MessageInfo::kPayloadFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageInfo::MessageInfo()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:challenge.MessageInfo)
}

void MessageInfo::InitAsDefaultInstance() {}

MessageInfo::MessageInfo(const MessageInfo &from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:challenge.MessageInfo)
}

void MessageInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  payload_size_ = 0;
  time_stamp_ = GOOGLE_LONGLONG(0);
  prefix_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageInfo::~MessageInfo() {
  // @@protoc_insertion_point(destructor:challenge.MessageInfo)
  SharedDtor();
}

void MessageInfo::SharedDtor() {
  prefix_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MessageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor *MessageInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageInfo_descriptor_;
}

const MessageInfo &MessageInfo::default_instance() {
  if (default_instance_ == NULL)
    protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

MessageInfo *MessageInfo::default_instance_ = NULL;

MessageInfo *MessageInfo::New(::google::protobuf::Arena *arena) const {
  MessageInfo *n = new MessageInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageInfo::Clear() {
  // @@protoc_insertion_point(message_clear_start:challenge.MessageInfo)
  if (_has_bits_[0 / 32] & 15u) {
    payload_size_ = 0;
    time_stamp_ = GOOGLE_LONGLONG(0);
    if (has_prefix()) {
      prefix_.ClearToEmptyNoArena(
          &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_payload()) {
      payload_.ClearToEmptyNoArena(
          &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MessageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION)                                                        \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION))                                        \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:challenge.MessageInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
    // required int32 payload_size = 1;
    case 1: {
      if (tag == 8) {
        DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
             ::google::protobuf::int32,
             ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
            input, &payload_size_)));
        set_has_payload_size();
      } else {
        goto handle_unusual;
      }
      if (input->ExpectTag(16))
        goto parse_time_stamp;
      break;
    }

    // required int64 time_stamp = 2;
    case 2: {
      if (tag == 16) {
      parse_time_stamp:
        DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
             ::google::protobuf::int64,
             ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
            input, &time_stamp_)));
        set_has_time_stamp();
      } else {
        goto handle_unusual;
      }
      if (input->ExpectTag(26))
        goto parse_prefix;
      break;
    }

    // required string prefix = 3;
    case 3: {
      if (tag == 26) {
      parse_prefix:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
            input, this->mutable_prefix()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->prefix().data(), this->prefix().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "challenge.MessageInfo.prefix");
      } else {
        goto handle_unusual;
      }
      if (input->ExpectTag(34))
        goto parse_payload;
      break;
    }

    // required bytes payload = 4;
    case 4: {
      if (tag == 34) {
      parse_payload:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
            input, this->mutable_payload()));
      } else {
        goto handle_unusual;
      }
      if (input->ExpectAtEnd())
        goto success;
      break;
    }

    default: {
    handle_unusual:
      if (tag == 0 ||
          ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
              ::google::protobuf::internal::WireFormatLite::
                  WIRETYPE_END_GROUP) {
        goto success;
      }
      DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
      break;
    }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:challenge.MessageInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:challenge.MessageInfo)
  return false;
#undef DO_
}

void MessageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream *output) const {
  // @@protoc_insertion_point(serialize_start:challenge.MessageInfo)
  // required int32 payload_size = 1;
  if (has_payload_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
        1, this->payload_size(), output);
  }

  // required int64 time_stamp = 2;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
        2, this->time_stamp(), output);
  }

  // required string prefix = 3;
  if (has_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->prefix().data(), this->prefix().length(),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "challenge.MessageInfo.prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        3, this->prefix(), output);
  }

  // required bytes payload = 4;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
        4, this->payload(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:challenge.MessageInfo)
}

::google::protobuf::uint8 *MessageInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8 *target) const {
  // @@protoc_insertion_point(serialize_to_array_start:challenge.MessageInfo)
  // required int32 payload_size = 1;
  if (has_payload_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->payload_size(), target);
  }

  // required int64 time_stamp = 2;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(
        2, this->time_stamp(), target);
  }

  // required string prefix = 3;
  if (has_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->prefix().data(), this->prefix().length(),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "challenge.MessageInfo.prefix");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->prefix(), target);
  }

  // required bytes payload = 4;
  if (has_payload()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->payload(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:challenge.MessageInfo)
  return target;
}

int MessageInfo::RequiredFieldsByteSizeFallback() const {
  // @@protoc_insertion_point(required_fields_byte_size_fallback_start:challenge.MessageInfo)
  int total_size = 0;

  if (has_payload_size()) {
    // required int32 payload_size = 1;
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                          this->payload_size());
  }

  if (has_time_stamp()) {
    // required int64 time_stamp = 2;
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(
                          this->time_stamp());
  }

  if (has_prefix()) {
    // required string prefix = 3;
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                          this->prefix());
  }

  if (has_payload()) {
    // required bytes payload = 4;
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                          this->payload());
  }

  return total_size;
}
int MessageInfo::ByteSize() const {
  // @@protoc_insertion_point(message_byte_size_start:challenge.MessageInfo)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) ==
      0) { // All required fields are present.
    // required int32 payload_size = 1;
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                          this->payload_size());

    // required int64 time_stamp = 2;
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(
                          this->time_stamp());

    // required string prefix = 3;
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                          this->prefix());

    // required bytes payload = 4;
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                          this->payload());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageInfo::MergeFrom(const ::google::protobuf::Message &from) {
  // @@protoc_insertion_point(generalized_merge_from_start:challenge.MessageInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MessageInfo *source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageInfo>(
          &from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:challenge.MessageInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:challenge.MessageInfo)
    MergeFrom(*source);
  }
}

void MessageInfo::MergeFrom(const MessageInfo &from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:challenge.MessageInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_payload_size()) {
      set_payload_size(from.payload_size());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
    if (from.has_prefix()) {
      set_has_prefix();
      prefix_.AssignWithDefault(
          &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
          from.prefix_);
    }
    if (from.has_payload()) {
      set_has_payload();
      payload_.AssignWithDefault(
          &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
          from.payload_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MessageInfo::CopyFrom(const ::google::protobuf::Message &from) {
  // @@protoc_insertion_point(generalized_copy_from_start:challenge.MessageInfo)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void MessageInfo::CopyFrom(const MessageInfo &from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:challenge.MessageInfo)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool MessageInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f)
    return false;

  return true;
}

void MessageInfo::Swap(MessageInfo *other) {
  if (other == this)
    return;
  InternalSwap(other);
}
void MessageInfo::InternalSwap(MessageInfo *other) {
  std::swap(payload_size_, other->payload_size_);
  std::swap(time_stamp_, other->time_stamp_);
  prefix_.Swap(&other->prefix_);
  payload_.Swap(&other->payload_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessageInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageInfo_descriptor_;
  metadata.reflection = MessageInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageInfo

// required int32 payload_size = 1;
bool MessageInfo::has_payload_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MessageInfo::set_has_payload_size() { _has_bits_[0] |= 0x00000001u; }
void MessageInfo::clear_has_payload_size() { _has_bits_[0] &= ~0x00000001u; }
void MessageInfo::clear_payload_size() {
  payload_size_ = 0;
  clear_has_payload_size();
}
::google::protobuf::int32 MessageInfo::payload_size() const {
  // @@protoc_insertion_point(field_get:challenge.MessageInfo.payload_size)
  return payload_size_;
}
void MessageInfo::set_payload_size(::google::protobuf::int32 value) {
  set_has_payload_size();
  payload_size_ = value;
  // @@protoc_insertion_point(field_set:challenge.MessageInfo.payload_size)
}

// required int64 time_stamp = 2;
bool MessageInfo::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MessageInfo::set_has_time_stamp() { _has_bits_[0] |= 0x00000002u; }
void MessageInfo::clear_has_time_stamp() { _has_bits_[0] &= ~0x00000002u; }
void MessageInfo::clear_time_stamp() {
  time_stamp_ = GOOGLE_LONGLONG(0);
  clear_has_time_stamp();
}
::google::protobuf::int64 MessageInfo::time_stamp() const {
  // @@protoc_insertion_point(field_get:challenge.MessageInfo.time_stamp)
  return time_stamp_;
}
void MessageInfo::set_time_stamp(::google::protobuf::int64 value) {
  set_has_time_stamp();
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:challenge.MessageInfo.time_stamp)
}

// required string prefix = 3;
bool MessageInfo::has_prefix() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MessageInfo::set_has_prefix() { _has_bits_[0] |= 0x00000004u; }
void MessageInfo::clear_has_prefix() { _has_bits_[0] &= ~0x00000004u; }
void MessageInfo::clear_prefix() {
  prefix_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_prefix();
}
const ::std::string &MessageInfo::prefix() const {
  // @@protoc_insertion_point(field_get:challenge.MessageInfo.prefix)
  return prefix_.GetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MessageInfo::set_prefix(const ::std::string &value) {
  set_has_prefix();
  prefix_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:challenge.MessageInfo.prefix)
}
void MessageInfo::set_prefix(const char *value) {
  set_has_prefix();
  prefix_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:challenge.MessageInfo.prefix)
}
void MessageInfo::set_prefix(const char *value, size_t size) {
  set_has_prefix();
  prefix_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char *>(value), size));
  // @@protoc_insertion_point(field_set_pointer:challenge.MessageInfo.prefix)
}
::std::string *MessageInfo::mutable_prefix() {
  set_has_prefix();
  // @@protoc_insertion_point(field_mutable:challenge.MessageInfo.prefix)
  return prefix_.MutableNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string *MessageInfo::release_prefix() {
  // @@protoc_insertion_point(field_release:challenge.MessageInfo.prefix)
  clear_has_prefix();
  return prefix_.ReleaseNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MessageInfo::set_allocated_prefix(::std::string *prefix) {
  if (prefix != NULL) {
    set_has_prefix();
  } else {
    clear_has_prefix();
  }
  prefix_.SetAllocatedNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), prefix);
  // @@protoc_insertion_point(field_set_allocated:challenge.MessageInfo.prefix)
}

// required bytes payload = 4;
bool MessageInfo::has_payload() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MessageInfo::set_has_payload() { _has_bits_[0] |= 0x00000008u; }
void MessageInfo::clear_has_payload() { _has_bits_[0] &= ~0x00000008u; }
void MessageInfo::clear_payload() {
  payload_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_payload();
}
const ::std::string &MessageInfo::payload() const {
  // @@protoc_insertion_point(field_get:challenge.MessageInfo.payload)
  return payload_.GetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MessageInfo::set_payload(const ::std::string &value) {
  set_has_payload();
  payload_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:challenge.MessageInfo.payload)
}
void MessageInfo::set_payload(const char *value) {
  set_has_payload();
  payload_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:challenge.MessageInfo.payload)
}
void MessageInfo::set_payload(const void *value, size_t size) {
  set_has_payload();
  payload_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char *>(value), size));
  // @@protoc_insertion_point(field_set_pointer:challenge.MessageInfo.payload)
}
::std::string *MessageInfo::mutable_payload() {
  set_has_payload();
  // @@protoc_insertion_point(field_mutable:challenge.MessageInfo.payload)
  return payload_.MutableNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string *MessageInfo::release_payload() {
  // @@protoc_insertion_point(field_release:challenge.MessageInfo.payload)
  clear_has_payload();
  return payload_.ReleaseNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MessageInfo::set_allocated_payload(::std::string *payload) {
  if (payload != NULL) {
    set_has_payload();
  } else {
    clear_has_payload();
  }
  payload_.SetAllocatedNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:challenge.MessageInfo.payload)
}

#endif // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

} // namespace challenge

// @@protoc_insertion_point(global_scope)
