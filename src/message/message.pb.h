// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef PROTOBUF_message_2eproto__INCLUDED
#define PROTOBUF_message_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace challenge {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_message_2eproto();
void protobuf_AssignDesc_message_2eproto();
void protobuf_ShutdownFile_message_2eproto();

class MessageInfo;

// ===================================================================

class MessageInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:challenge.MessageInfo)
                                                        */
{
public:
  MessageInfo();
  virtual ~MessageInfo();

  MessageInfo(const MessageInfo &from);

  inline MessageInfo &operator=(const MessageInfo &from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet &unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet *mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor *descriptor();
  static const MessageInfo &default_instance();

  void Swap(MessageInfo *other);

  // implements Message ----------------------------------------------

  inline MessageInfo *New() const { return New(NULL); }

  MessageInfo *New(::google::protobuf::Arena *arena) const;
  void CopyFrom(const ::google::protobuf::Message &from);
  void MergeFrom(const ::google::protobuf::Message &from);
  void CopyFrom(const MessageInfo &from);
  void MergeFrom(const MessageInfo &from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool
  MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream *input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream *output) const;
  ::google::protobuf::uint8 *InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8 *output) const;
  ::google::protobuf::uint8 *
  SerializeWithCachedSizesToArray(::google::protobuf::uint8 *output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }

private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessageInfo *other);

private:
  inline ::google::protobuf::Arena *GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void *MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }

public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 payload_size = 1;
  bool has_payload_size() const;
  void clear_payload_size();
  static const int kPayloadSizeFieldNumber = 1;
  ::google::protobuf::int32 payload_size() const;
  void set_payload_size(::google::protobuf::int32 value);

  // required int64 time_stamp = 2;
  bool has_time_stamp() const;
  void clear_time_stamp();
  static const int kTimeStampFieldNumber = 2;
  ::google::protobuf::int64 time_stamp() const;
  void set_time_stamp(::google::protobuf::int64 value);

  // required string prefix = 3;
  bool has_prefix() const;
  void clear_prefix();
  static const int kPrefixFieldNumber = 3;
  const ::std::string &prefix() const;
  void set_prefix(const ::std::string &value);
  void set_prefix(const char *value);
  void set_prefix(const char *value, size_t size);
  ::std::string *mutable_prefix();
  ::std::string *release_prefix();
  void set_allocated_prefix(::std::string *prefix);

  // required bytes payload = 4;
  bool has_payload() const;
  void clear_payload();
  static const int kPayloadFieldNumber = 4;
  const ::std::string &payload() const;
  void set_payload(const ::std::string &value);
  void set_payload(const char *value);
  void set_payload(const void *value, size_t size);
  ::std::string *mutable_payload();
  ::std::string *release_payload();
  void set_allocated_payload(::std::string *payload);

  // @@protoc_insertion_point(class_scope:challenge.MessageInfo)
private:
  inline void set_has_payload_size();
  inline void clear_has_payload_size();
  inline void set_has_time_stamp();
  inline void clear_has_time_stamp();
  inline void set_has_prefix();
  inline void clear_has_prefix();
  inline void set_has_payload();
  inline void clear_has_payload();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 time_stamp_;
  ::google::protobuf::internal::ArenaStringPtr prefix_;
  ::google::protobuf::internal::ArenaStringPtr payload_;
  ::google::protobuf::int32 payload_size_;
  friend void protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static MessageInfo *default_instance_;
};
// ===================================================================

// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageInfo

// required int32 payload_size = 1;
inline bool MessageInfo::has_payload_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MessageInfo::set_has_payload_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MessageInfo::clear_has_payload_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MessageInfo::clear_payload_size() {
  payload_size_ = 0;
  clear_has_payload_size();
}
inline ::google::protobuf::int32 MessageInfo::payload_size() const {
  // @@protoc_insertion_point(field_get:challenge.MessageInfo.payload_size)
  return payload_size_;
}
inline void MessageInfo::set_payload_size(::google::protobuf::int32 value) {
  set_has_payload_size();
  payload_size_ = value;
  // @@protoc_insertion_point(field_set:challenge.MessageInfo.payload_size)
}

// required int64 time_stamp = 2;
inline bool MessageInfo::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MessageInfo::set_has_time_stamp() { _has_bits_[0] |= 0x00000002u; }
inline void MessageInfo::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MessageInfo::clear_time_stamp() {
  time_stamp_ = GOOGLE_LONGLONG(0);
  clear_has_time_stamp();
}
inline ::google::protobuf::int64 MessageInfo::time_stamp() const {
  // @@protoc_insertion_point(field_get:challenge.MessageInfo.time_stamp)
  return time_stamp_;
}
inline void MessageInfo::set_time_stamp(::google::protobuf::int64 value) {
  set_has_time_stamp();
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:challenge.MessageInfo.time_stamp)
}

// required string prefix = 3;
inline bool MessageInfo::has_prefix() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MessageInfo::set_has_prefix() { _has_bits_[0] |= 0x00000004u; }
inline void MessageInfo::clear_has_prefix() { _has_bits_[0] &= ~0x00000004u; }
inline void MessageInfo::clear_prefix() {
  prefix_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_prefix();
}
inline const ::std::string &MessageInfo::prefix() const {
  // @@protoc_insertion_point(field_get:challenge.MessageInfo.prefix)
  return prefix_.GetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageInfo::set_prefix(const ::std::string &value) {
  set_has_prefix();
  prefix_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:challenge.MessageInfo.prefix)
}
inline void MessageInfo::set_prefix(const char *value) {
  set_has_prefix();
  prefix_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:challenge.MessageInfo.prefix)
}
inline void MessageInfo::set_prefix(const char *value, size_t size) {
  set_has_prefix();
  prefix_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char *>(value), size));
  // @@protoc_insertion_point(field_set_pointer:challenge.MessageInfo.prefix)
}
inline ::std::string *MessageInfo::mutable_prefix() {
  set_has_prefix();
  // @@protoc_insertion_point(field_mutable:challenge.MessageInfo.prefix)
  return prefix_.MutableNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string *MessageInfo::release_prefix() {
  // @@protoc_insertion_point(field_release:challenge.MessageInfo.prefix)
  clear_has_prefix();
  return prefix_.ReleaseNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageInfo::set_allocated_prefix(::std::string *prefix) {
  if (prefix != NULL) {
    set_has_prefix();
  } else {
    clear_has_prefix();
  }
  prefix_.SetAllocatedNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), prefix);
  // @@protoc_insertion_point(field_set_allocated:challenge.MessageInfo.prefix)
}

// required bytes payload = 4;
inline bool MessageInfo::has_payload() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MessageInfo::set_has_payload() { _has_bits_[0] |= 0x00000008u; }
inline void MessageInfo::clear_has_payload() { _has_bits_[0] &= ~0x00000008u; }
inline void MessageInfo::clear_payload() {
  payload_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_payload();
}
inline const ::std::string &MessageInfo::payload() const {
  // @@protoc_insertion_point(field_get:challenge.MessageInfo.payload)
  return payload_.GetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageInfo::set_payload(const ::std::string &value) {
  set_has_payload();
  payload_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:challenge.MessageInfo.payload)
}
inline void MessageInfo::set_payload(const char *value) {
  set_has_payload();
  payload_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:challenge.MessageInfo.payload)
}
inline void MessageInfo::set_payload(const void *value, size_t size) {
  set_has_payload();
  payload_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char *>(value), size));
  // @@protoc_insertion_point(field_set_pointer:challenge.MessageInfo.payload)
}
inline ::std::string *MessageInfo::mutable_payload() {
  set_has_payload();
  // @@protoc_insertion_point(field_mutable:challenge.MessageInfo.payload)
  return payload_.MutableNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string *MessageInfo::release_payload() {
  // @@protoc_insertion_point(field_release:challenge.MessageInfo.payload)
  clear_has_payload();
  return payload_.ReleaseNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageInfo::set_allocated_payload(::std::string *payload) {
  if (payload != NULL) {
    set_has_payload();
  } else {
    clear_has_payload();
  }
  payload_.SetAllocatedNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:challenge.MessageInfo.payload)
}

#endif // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

} // namespace challenge

// @@protoc_insertion_point(global_scope)

#endif // PROTOBUF_message_2eproto__INCLUDED
