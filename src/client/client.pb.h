// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.proto

#ifndef PROTOBUF_client_2eproto__INCLUDED
#define PROTOBUF_client_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace challenge {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_client_2eproto();
void protobuf_AssignDesc_client_2eproto();
void protobuf_ShutdownFile_client_2eproto();

class ServerInfo;

// ===================================================================

class ServerInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:challenge.ServerInfo)
                                                       */
{
public:
  ServerInfo();
  virtual ~ServerInfo();

  ServerInfo(const ServerInfo &from);

  inline ServerInfo &operator=(const ServerInfo &from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet &unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet *mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor *descriptor();
  static const ServerInfo &default_instance();

  void Swap(ServerInfo *other);

  // implements Message ----------------------------------------------

  inline ServerInfo *New() const { return New(NULL); }

  ServerInfo *New(::google::protobuf::Arena *arena) const;
  void CopyFrom(const ::google::protobuf::Message &from);
  void MergeFrom(const ::google::protobuf::Message &from);
  void CopyFrom(const ServerInfo &from);
  void MergeFrom(const ServerInfo &from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool
  MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream *input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream *output) const;
  ::google::protobuf::uint8 *InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8 *output) const;
  ::google::protobuf::uint8 *
  SerializeWithCachedSizesToArray(::google::protobuf::uint8 *output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }

private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServerInfo *other);

private:
  inline ::google::protobuf::Arena *GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void *MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }

public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string address = 1;
  bool has_address() const;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string &address() const;
  void set_address(const ::std::string &value);
  void set_address(const char *value);
  void set_address(const char *value, size_t size);
  ::std::string *mutable_address();
  ::std::string *release_address();
  void set_allocated_address(::std::string *address);

  // required int32 port = 2;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // required int32 package_size = 3;
  bool has_package_size() const;
  void clear_package_size();
  static const int kPackageSizeFieldNumber = 3;
  ::google::protobuf::int32 package_size() const;
  void set_package_size(::google::protobuf::int32 value);

  // required string file_name = 4;
  bool has_file_name() const;
  void clear_file_name();
  static const int kFileNameFieldNumber = 4;
  const ::std::string &file_name() const;
  void set_file_name(const ::std::string &value);
  void set_file_name(const char *value);
  void set_file_name(const char *value, size_t size);
  ::std::string *mutable_file_name();
  ::std::string *release_file_name();
  void set_allocated_file_name(::std::string *file_name);

  // required int32 timeout_ms = 5;
  bool has_timeout_ms() const;
  void clear_timeout_ms();
  static const int kTimeoutMsFieldNumber = 5;
  ::google::protobuf::int32 timeout_ms() const;
  void set_timeout_ms(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:challenge.ServerInfo)
private:
  inline void set_has_address();
  inline void clear_has_address();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_package_size();
  inline void clear_has_package_size();
  inline void set_has_file_name();
  inline void clear_has_file_name();
  inline void set_has_timeout_ms();
  inline void clear_has_timeout_ms();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::int32 port_;
  ::google::protobuf::int32 package_size_;
  ::google::protobuf::internal::ArenaStringPtr file_name_;
  ::google::protobuf::int32 timeout_ms_;
  friend void protobuf_AddDesc_client_2eproto();
  friend void protobuf_AssignDesc_client_2eproto();
  friend void protobuf_ShutdownFile_client_2eproto();

  void InitAsDefaultInstance();
  static ServerInfo *default_instance_;
};
// ===================================================================

// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerInfo

// optional string address = 1;
inline bool ServerInfo::has_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerInfo::set_has_address() { _has_bits_[0] |= 0x00000001u; }
inline void ServerInfo::clear_has_address() { _has_bits_[0] &= ~0x00000001u; }
inline void ServerInfo::clear_address() {
  address_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_address();
}
inline const ::std::string &ServerInfo::address() const {
  // @@protoc_insertion_point(field_get:challenge.ServerInfo.address)
  return address_.GetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfo::set_address(const ::std::string &value) {
  set_has_address();
  address_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:challenge.ServerInfo.address)
}
inline void ServerInfo::set_address(const char *value) {
  set_has_address();
  address_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:challenge.ServerInfo.address)
}
inline void ServerInfo::set_address(const char *value, size_t size) {
  set_has_address();
  address_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char *>(value), size));
  // @@protoc_insertion_point(field_set_pointer:challenge.ServerInfo.address)
}
inline ::std::string *ServerInfo::mutable_address() {
  set_has_address();
  // @@protoc_insertion_point(field_mutable:challenge.ServerInfo.address)
  return address_.MutableNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string *ServerInfo::release_address() {
  // @@protoc_insertion_point(field_release:challenge.ServerInfo.address)
  clear_has_address();
  return address_.ReleaseNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfo::set_allocated_address(::std::string *address) {
  if (address != NULL) {
    set_has_address();
  } else {
    clear_has_address();
  }
  address_.SetAllocatedNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:challenge.ServerInfo.address)
}

// required int32 port = 2;
inline bool ServerInfo::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerInfo::set_has_port() { _has_bits_[0] |= 0x00000002u; }
inline void ServerInfo::clear_has_port() { _has_bits_[0] &= ~0x00000002u; }
inline void ServerInfo::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 ServerInfo::port() const {
  // @@protoc_insertion_point(field_get:challenge.ServerInfo.port)
  return port_;
}
inline void ServerInfo::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:challenge.ServerInfo.port)
}

// required int32 package_size = 3;
inline bool ServerInfo::has_package_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerInfo::set_has_package_size() { _has_bits_[0] |= 0x00000004u; }
inline void ServerInfo::clear_has_package_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerInfo::clear_package_size() {
  package_size_ = 0;
  clear_has_package_size();
}
inline ::google::protobuf::int32 ServerInfo::package_size() const {
  // @@protoc_insertion_point(field_get:challenge.ServerInfo.package_size)
  return package_size_;
}
inline void ServerInfo::set_package_size(::google::protobuf::int32 value) {
  set_has_package_size();
  package_size_ = value;
  // @@protoc_insertion_point(field_set:challenge.ServerInfo.package_size)
}

// required string file_name = 4;
inline bool ServerInfo::has_file_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServerInfo::set_has_file_name() { _has_bits_[0] |= 0x00000008u; }
inline void ServerInfo::clear_has_file_name() { _has_bits_[0] &= ~0x00000008u; }
inline void ServerInfo::clear_file_name() {
  file_name_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_name();
}
inline const ::std::string &ServerInfo::file_name() const {
  // @@protoc_insertion_point(field_get:challenge.ServerInfo.file_name)
  return file_name_.GetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfo::set_file_name(const ::std::string &value) {
  set_has_file_name();
  file_name_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:challenge.ServerInfo.file_name)
}
inline void ServerInfo::set_file_name(const char *value) {
  set_has_file_name();
  file_name_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:challenge.ServerInfo.file_name)
}
inline void ServerInfo::set_file_name(const char *value, size_t size) {
  set_has_file_name();
  file_name_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char *>(value), size));
  // @@protoc_insertion_point(field_set_pointer:challenge.ServerInfo.file_name)
}
inline ::std::string *ServerInfo::mutable_file_name() {
  set_has_file_name();
  // @@protoc_insertion_point(field_mutable:challenge.ServerInfo.file_name)
  return file_name_.MutableNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string *ServerInfo::release_file_name() {
  // @@protoc_insertion_point(field_release:challenge.ServerInfo.file_name)
  clear_has_file_name();
  return file_name_.ReleaseNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfo::set_allocated_file_name(::std::string *file_name) {
  if (file_name != NULL) {
    set_has_file_name();
  } else {
    clear_has_file_name();
  }
  file_name_.SetAllocatedNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:challenge.ServerInfo.file_name)
}

// required int32 timeout_ms = 5;
inline bool ServerInfo::has_timeout_ms() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ServerInfo::set_has_timeout_ms() { _has_bits_[0] |= 0x00000010u; }
inline void ServerInfo::clear_has_timeout_ms() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ServerInfo::clear_timeout_ms() {
  timeout_ms_ = 0;
  clear_has_timeout_ms();
}
inline ::google::protobuf::int32 ServerInfo::timeout_ms() const {
  // @@protoc_insertion_point(field_get:challenge.ServerInfo.timeout_ms)
  return timeout_ms_;
}
inline void ServerInfo::set_timeout_ms(::google::protobuf::int32 value) {
  set_has_timeout_ms();
  timeout_ms_ = value;
  // @@protoc_insertion_point(field_set:challenge.ServerInfo.timeout_ms)
}

#endif // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

} // namespace challenge

// @@protoc_insertion_point(global_scope)

#endif // PROTOBUF_client_2eproto__INCLUDED
